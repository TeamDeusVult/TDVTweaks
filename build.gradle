buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        jcenter()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven {
            name 'parchment'
            url 'https://maven.parchmentmc.org'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forgegradle_version}", changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: "${mixingradle_version}"
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version "${shadow_version}"
    id 'com.matthewprenger.cursegradle' version "${cursegradle_version}"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

boolean dev = System.getenv('RELEASE') == null || System.getenv('RELEASE').equals('false');

ext.buildnumber = 0
project.buildnumber = System.getenv('BUILD_NUMBER') != null ? System.getenv('BUILD_NUMBER') : "custom"

version = "mc${minecraft_version}_v${mod_version}" + (dev && !buildnumber.equals("custom") ? "+${buildnumber}" : '')
group = 'vice.' + String.valueOf(mod_id)
archivesBaseName = String.valueOf(mod_id)

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=' + String.valueOf(mod_id) + '.mixins.json'
            //jvmArgs '-XX:+UnlockCommercialFeatures' // uncomment for profiling
            property 'forge.logging.console.level', 'info'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                tdv_tweaks {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            arg '-mixin.config=' + String.valueOf(mod_id) + '.mixins.json'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                tdv_tweaks {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--mod', String.valueOf(mod_id), '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')
            mods {
                tdv_tweaks {
                    source sourceSets.main
                }
            }
        }
    }
}

compileJava {
    options.compilerArgs = ["-Xdiags:verbose"]
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}

repositories {
    maven {
        // Location of the maven for mixed mappings, Registrate, and Flywheel
        name = "tterrag maven"
        url = "https://maven.tterrag.com/"
    }
    maven {
        url = "https://www.cursemaven.com"
    }
    mavenCentral()
}

configurations {
    shade
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    //def registrate = "com.tterrag.registrate:Registrate:MC1.16.5-${registrate_version}"
    //implementation fg.deobf(registrate)
    //shade registrate

    implementation fg.deobf("curse.maven:jei-238222:3590083")

    runtimeOnly fg.deobf("curse.maven:blur-268324:3271923")
    runtimeOnly fg.deobf("curse.maven:magnesium-532724:3526076")
    runtimeOnly fg.deobf("curse.maven:magnesiumextras-558905:3592543")
    runtimeOnly fg.deobf("curse.maven:dynlights-551736:3574974")

    runtimeOnly fg.deobf("curse.maven:configured-457570:3546348")
    runtimeOnly fg.deobf("curse.maven:jer-240630:3066754")
    runtimeOnly fg.deobf("curse.maven:hwyla-253449:3033593")

    annotationProcessor 'org.spongepowered:mixin:0.8.3:processor'
}

jar {
    manifest {
        attributes([
                "Specification-Title": "${mod_id}",
                "Specification-Vendor": "vice",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"vice",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${mod_id}.mixins.json"
        ])
    }
}

shadowJar {
    classifier = ''
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'com.tterrag.' + String.valueOf(mod_id) + '.repack.registrate'
}

reobf {
    shadowJar {}
}


task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveBaseName.set(project.archivesBaseName)
    archiveVersion.set("${project.version}")
    archiveClassifier.set('sources')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
}

artifacts {
    archives jar, shadowJar
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
            artifact sourcesJar
            artifact javadocJar
        }
    }

    repositories {
        if (project.hasProperty('mavendir')) {
            maven { url mavendir }
        }
    }
}